import { IKeyWord } from "./interfaces";

// https://www.w3.org/TR/WGSL/#other-keywords
// Other Keywords
export const keywords: IKeyWord[] = [
    { name: 'bitcast' },
    { name: 'break' },
    { name: 'case' },
    { name: 'const' },
    { name: 'continue' },
    { name: 'continuing' },
    { name: 'default' },
    { name: 'discard' },
    { name: 'else' },
    { name: 'enable' },
    { name: 'false' },
    { name: 'fn' },
    { name: 'for' },
    { name: 'if' },
    { name: 'let' },
    { name: 'loop' },
    { name: 'override' },
    { name: 'return' },
    { name: 'static_assert' },
    { name: 'struct' },
    { name: 'switch' },
    { name: 'true' },
    { name: 'type' },
    { name: 'var' },
    { name: 'while' },
    // https://www.w3.org/TR/WGSL/#reserved-words
    // Reserved Words
    { name: 'CompileShader' },
    { name: 'ComputeShader' },
    { name: 'DomainShader' },
    { name: 'GeometryShader' },
    { name: 'Hullshader' },
    { name: 'NULL' },
    { name: 'Self' },
    { name: 'abstract' },
    { name: 'active' },
    { name: 'alignas' },
    { name: 'alignof' },
    { name: 'as' },
    { name: 'asm' },
    { name: 'asm_fragment' },
    { name: 'async' },
    { name: 'attribute' },
    { name: 'auto' },
    { name: 'await' },
    { name: 'become' },
    { name: 'binding_array' },
    { name: 'cast' },
    { name: 'catch' },
    { name: 'class' },
    { name: 'co_await' },
    { name: 'co_return' },
    { name: 'co_yield' },
    { name: 'coherent' },
    { name: 'column_major' },
    { name: 'common' },
    { name: 'compile' },
    { name: 'compile_fragment' },
    { name: 'concept' },
    { name: 'const_cast' },
    { name: 'consteval' },
    { name: 'constexpr' },
    { name: 'constinit' },
    { name: 'crate' },
    { name: 'debugger' },
    { name: 'decltype' },
    { name: 'delete' },
    { name: 'demote' },
    { name: 'demote_to_helper' },
    { name: 'do' },
    { name: 'dynamic_cast' },
    { name: 'enum' },
    { name: 'explicit' },
    { name: 'export' },
    { name: 'extends' },
    { name: 'extern' },
    { name: 'external' },
    { name: 'fallthrough' },
    { name: 'filter' },
    { name: 'final' },
    { name: 'finally' },
    { name: 'friend' },
    { name: 'from' },
    { name: 'fxgroup' },
    { name: 'get' },
    { name: 'goto' },
    { name: 'groupshared' },
    { name: 'handle' },
    { name: 'highp' },
    { name: 'impl' },
    { name: 'implements' },
    { name: 'import' },
    { name: 'inline' },
    { name: 'inout' },
    { name: 'instanceof' },
    { name: 'interface' },
    { name: 'layout' },
    { name: 'line' },
    { name: 'lineadj' },
    { name: 'lowp' },
    { name: 'macro' },
    { name: 'macro_rules' },
    { name: 'match' },
    { name: 'mediump' },
    { name: 'meta' },
    { name: 'mod' },
    { name: 'module' },
    { name: 'move' },
    { name: 'mut' },
    { name: 'mutable' },
    { name: 'namespace' },
    { name: 'new' },
    { name: 'nil' },
    { name: 'noexcept' },
    { name: 'noinline' },
    { name: 'nointerpolation' },
    { name: 'noperspective' },
    { name: 'null' },
    { name: 'nullptr' },
    { name: 'of' },
    { name: 'operator' },
    { name: 'package' },
    { name: 'packoffset' },
    { name: 'partition' },
    { name: 'pass' },
    { name: 'patch' },
    { name: 'pixelfragment' },
    { name: 'point' },
    { name: 'precise' },
    { name: 'precision' },
    { name: 'premerge' },
    { name: 'priv' },
    { name: 'protected' },
    { name: 'pub' },
    { name: 'public' },
    { name: 'readonly' },
    { name: 'ref' },
    { name: 'regardless' },
    { name: 'register' },
    { name: 'reinterpret_cast' },
    { name: 'requires' },
    { name: 'resource' },
    { name: 'restrict' },
    { name: 'self' },
    { name: 'set' },
    { name: 'shared' },
    { name: 'signed' },
    { name: 'sizeof' },
    { name: 'smooth' },
    { name: 'snorm' },
    { name: 'static' },
    { name: 'static_assert' },
    { name: 'static_cast' },
    { name: 'std' },
    { name: 'subroutine' },
    { name: 'super' },
    { name: 'target' },
    { name: 'template' },
    { name: 'this' },
    { name: 'thread_local' },
    { name: 'throw' },
    { name: 'trait' },
    { name: 'try' },
    { name: 'typedef' },
    { name: 'typeid' },
    { name: 'typename' },
    { name: 'typeof' },
    { name: 'union' },
    { name: 'unless' },
    { name: 'unorm' },
    { name: 'unsafe' },
    { name: 'unsized' },
    { name: 'use' },
    { name: 'using' },
    { name: 'varying' },
    { name: 'virtual' },
    { name: 'volatile' },
    { name: 'wgsl' },
    { name: 'where' },
    { name: 'with' },
    { name: 'writeonly' },
    { name: 'yield' },
];

export const accessMode: IKeyWord[] = [
    { name: 'read' },
    { name: 'write' },
    { name: 'read_write' },
];

export const addressSpace: IKeyWord[] = [
    { name: 'function' },
    { name: 'private' },
    { name: 'workgroup' },
    { name: 'uniform' },
    { name: 'storage' },
];